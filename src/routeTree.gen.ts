/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as VerifyCodeImport } from './routes/verify-code';
import { Route as ResetPasswordImport } from './routes/reset-password';
import { Route as IncomeImport } from './routes/income';
import { Route as ForgotPasswordImport } from './routes/forgot-password';
import { Route as ExpenseImport } from './routes/expense';
import { Route as SettingsImport } from './routes/_settings';
import { Route as AuthImport } from './routes/_auth';
import { Route as IndexImport } from './routes/index';
import { Route as BudgetIndexImport } from './routes/budget/index';
import { Route as BudgetIdImport } from './routes/budget/$id';
import { Route as SettingsProfileImport } from './routes/_settings/profile';
import { Route as SettingsCategoryImport } from './routes/_settings/category';
import { Route as AuthRegisterImport } from './routes/_auth/register';
import { Route as AuthLoginImport } from './routes/_auth/login';
import { Route as BudgetItemIdImport } from './routes/budget/item/$id';
import { Route as BudgetFormIdImport } from './routes/budget/form/$id';

// Create/Update Routes

const VerifyCodeRoute = VerifyCodeImport.update({
  id: '/verify-code',
  path: '/verify-code',
  getParentRoute: () => rootRoute,
} as any);

const ResetPasswordRoute = ResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any);

const IncomeRoute = IncomeImport.update({
  id: '/income',
  path: '/income',
  getParentRoute: () => rootRoute,
} as any);

const ForgotPasswordRoute = ForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRoute,
} as any);

const ExpenseRoute = ExpenseImport.update({
  id: '/expense',
  path: '/expense',
  getParentRoute: () => rootRoute,
} as any);

const SettingsRoute = SettingsImport.update({
  id: '/_settings',
  getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const BudgetIndexRoute = BudgetIndexImport.update({
  id: '/budget/',
  path: '/budget/',
  getParentRoute: () => rootRoute,
} as any);

const BudgetIdRoute = BudgetIdImport.update({
  id: '/budget/$id',
  path: '/budget/$id',
  getParentRoute: () => rootRoute,
} as any);

const SettingsProfileRoute = SettingsProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => SettingsRoute,
} as any);

const SettingsCategoryRoute = SettingsCategoryImport.update({
  id: '/category',
  path: '/category',
  getParentRoute: () => SettingsRoute,
} as any);

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any);

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any);

const BudgetItemIdRoute = BudgetItemIdImport.update({
  id: '/budget/item/$id',
  path: '/budget/item/$id',
  getParentRoute: () => rootRoute,
} as any);

const BudgetFormIdRoute = BudgetFormIdImport.update({
  id: '/budget/form/$id',
  path: '/budget/form/$id',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth': {
      id: '/_auth';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    '/_settings': {
      id: '/_settings';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof SettingsImport;
      parentRoute: typeof rootRoute;
    };
    '/expense': {
      id: '/expense';
      path: '/expense';
      fullPath: '/expense';
      preLoaderRoute: typeof ExpenseImport;
      parentRoute: typeof rootRoute;
    };
    '/forgot-password': {
      id: '/forgot-password';
      path: '/forgot-password';
      fullPath: '/forgot-password';
      preLoaderRoute: typeof ForgotPasswordImport;
      parentRoute: typeof rootRoute;
    };
    '/income': {
      id: '/income';
      path: '/income';
      fullPath: '/income';
      preLoaderRoute: typeof IncomeImport;
      parentRoute: typeof rootRoute;
    };
    '/reset-password': {
      id: '/reset-password';
      path: '/reset-password';
      fullPath: '/reset-password';
      preLoaderRoute: typeof ResetPasswordImport;
      parentRoute: typeof rootRoute;
    };
    '/verify-code': {
      id: '/verify-code';
      path: '/verify-code';
      fullPath: '/verify-code';
      preLoaderRoute: typeof VerifyCodeImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth/login': {
      id: '/_auth/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof AuthLoginImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/register': {
      id: '/_auth/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof AuthRegisterImport;
      parentRoute: typeof AuthImport;
    };
    '/_settings/category': {
      id: '/_settings/category';
      path: '/category';
      fullPath: '/category';
      preLoaderRoute: typeof SettingsCategoryImport;
      parentRoute: typeof SettingsImport;
    };
    '/_settings/profile': {
      id: '/_settings/profile';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof SettingsProfileImport;
      parentRoute: typeof SettingsImport;
    };
    '/budget/$id': {
      id: '/budget/$id';
      path: '/budget/$id';
      fullPath: '/budget/$id';
      preLoaderRoute: typeof BudgetIdImport;
      parentRoute: typeof rootRoute;
    };
    '/budget/': {
      id: '/budget/';
      path: '/budget';
      fullPath: '/budget';
      preLoaderRoute: typeof BudgetIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/budget/form/$id': {
      id: '/budget/form/$id';
      path: '/budget/form/$id';
      fullPath: '/budget/form/$id';
      preLoaderRoute: typeof BudgetFormIdImport;
      parentRoute: typeof rootRoute;
    };
    '/budget/item/$id': {
      id: '/budget/item/$id';
      path: '/budget/item/$id';
      fullPath: '/budget/item/$id';
      preLoaderRoute: typeof BudgetItemIdImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute;
  AuthRegisterRoute: typeof AuthRegisterRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

interface SettingsRouteChildren {
  SettingsCategoryRoute: typeof SettingsCategoryRoute;
  SettingsProfileRoute: typeof SettingsProfileRoute;
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsCategoryRoute: SettingsCategoryRoute,
  SettingsProfileRoute: SettingsProfileRoute,
};

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren
);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof SettingsRouteWithChildren;
  '/expense': typeof ExpenseRoute;
  '/forgot-password': typeof ForgotPasswordRoute;
  '/income': typeof IncomeRoute;
  '/reset-password': typeof ResetPasswordRoute;
  '/verify-code': typeof VerifyCodeRoute;
  '/login': typeof AuthLoginRoute;
  '/register': typeof AuthRegisterRoute;
  '/category': typeof SettingsCategoryRoute;
  '/profile': typeof SettingsProfileRoute;
  '/budget/$id': typeof BudgetIdRoute;
  '/budget': typeof BudgetIndexRoute;
  '/budget/form/$id': typeof BudgetFormIdRoute;
  '/budget/item/$id': typeof BudgetItemIdRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof SettingsRouteWithChildren;
  '/expense': typeof ExpenseRoute;
  '/forgot-password': typeof ForgotPasswordRoute;
  '/income': typeof IncomeRoute;
  '/reset-password': typeof ResetPasswordRoute;
  '/verify-code': typeof VerifyCodeRoute;
  '/login': typeof AuthLoginRoute;
  '/register': typeof AuthRegisterRoute;
  '/category': typeof SettingsCategoryRoute;
  '/profile': typeof SettingsProfileRoute;
  '/budget/$id': typeof BudgetIdRoute;
  '/budget': typeof BudgetIndexRoute;
  '/budget/form/$id': typeof BudgetFormIdRoute;
  '/budget/item/$id': typeof BudgetItemIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_auth': typeof AuthRouteWithChildren;
  '/_settings': typeof SettingsRouteWithChildren;
  '/expense': typeof ExpenseRoute;
  '/forgot-password': typeof ForgotPasswordRoute;
  '/income': typeof IncomeRoute;
  '/reset-password': typeof ResetPasswordRoute;
  '/verify-code': typeof VerifyCodeRoute;
  '/_auth/login': typeof AuthLoginRoute;
  '/_auth/register': typeof AuthRegisterRoute;
  '/_settings/category': typeof SettingsCategoryRoute;
  '/_settings/profile': typeof SettingsProfileRoute;
  '/budget/$id': typeof BudgetIdRoute;
  '/budget/': typeof BudgetIndexRoute;
  '/budget/form/$id': typeof BudgetFormIdRoute;
  '/budget/item/$id': typeof BudgetItemIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | ''
    | '/expense'
    | '/forgot-password'
    | '/income'
    | '/reset-password'
    | '/verify-code'
    | '/login'
    | '/register'
    | '/category'
    | '/profile'
    | '/budget/$id'
    | '/budget'
    | '/budget/form/$id'
    | '/budget/item/$id';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | ''
    | '/expense'
    | '/forgot-password'
    | '/income'
    | '/reset-password'
    | '/verify-code'
    | '/login'
    | '/register'
    | '/category'
    | '/profile'
    | '/budget/$id'
    | '/budget'
    | '/budget/form/$id'
    | '/budget/item/$id';
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_settings'
    | '/expense'
    | '/forgot-password'
    | '/income'
    | '/reset-password'
    | '/verify-code'
    | '/_auth/login'
    | '/_auth/register'
    | '/_settings/category'
    | '/_settings/profile'
    | '/budget/$id'
    | '/budget/'
    | '/budget/form/$id'
    | '/budget/item/$id';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRoute: typeof AuthRouteWithChildren;
  SettingsRoute: typeof SettingsRouteWithChildren;
  ExpenseRoute: typeof ExpenseRoute;
  ForgotPasswordRoute: typeof ForgotPasswordRoute;
  IncomeRoute: typeof IncomeRoute;
  ResetPasswordRoute: typeof ResetPasswordRoute;
  VerifyCodeRoute: typeof VerifyCodeRoute;
  BudgetIdRoute: typeof BudgetIdRoute;
  BudgetIndexRoute: typeof BudgetIndexRoute;
  BudgetFormIdRoute: typeof BudgetFormIdRoute;
  BudgetItemIdRoute: typeof BudgetItemIdRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  SettingsRoute: SettingsRouteWithChildren,
  ExpenseRoute: ExpenseRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  IncomeRoute: IncomeRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  VerifyCodeRoute: VerifyCodeRoute,
  BudgetIdRoute: BudgetIdRoute,
  BudgetIndexRoute: BudgetIndexRoute,
  BudgetFormIdRoute: BudgetFormIdRoute,
  BudgetItemIdRoute: BudgetItemIdRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_settings",
        "/expense",
        "/forgot-password",
        "/income",
        "/reset-password",
        "/verify-code",
        "/budget/$id",
        "/budget/",
        "/budget/form/$id",
        "/budget/item/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/_settings": {
      "filePath": "_settings.tsx",
      "children": [
        "/_settings/category",
        "/_settings/profile"
      ]
    },
    "/expense": {
      "filePath": "expense.tsx"
    },
    "/forgot-password": {
      "filePath": "forgot-password.tsx"
    },
    "/income": {
      "filePath": "income.tsx"
    },
    "/reset-password": {
      "filePath": "reset-password.tsx"
    },
    "/verify-code": {
      "filePath": "verify-code.tsx"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_settings/category": {
      "filePath": "_settings/category.tsx",
      "parent": "/_settings"
    },
    "/_settings/profile": {
      "filePath": "_settings/profile.tsx",
      "parent": "/_settings"
    },
    "/budget/$id": {
      "filePath": "budget/$id.tsx"
    },
    "/budget/": {
      "filePath": "budget/index.tsx"
    },
    "/budget/form/$id": {
      "filePath": "budget/form/$id.tsx"
    },
    "/budget/item/$id": {
      "filePath": "budget/item/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
